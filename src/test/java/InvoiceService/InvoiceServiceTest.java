/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package InvoiceService;

import org.junit.Test;

import InvoiceService.Ride.RideType;

import static org.junit.Assert.*;

import org.junit.Assert;

public class InvoiceServiceTest {
	@Test
	public void givenDistanceAndTime_ShouldReturnTotalFare() {
		InvoiceGenerator invoiceGenerator = new InvoiceGenerator();
		double distance = 2.0;
		int time = 5;
		double fare = invoiceGenerator.calculateFare(distance, time,RideType.RIDE_NORMAL);
		assertEquals(25, fare, 0.0);
	}

	@Test
	public void givenLessDistanceAndTime_ShouldReturnMinimumFare() {
		InvoiceGenerator invoiceGenerator = new InvoiceGenerator();
		double distance = 0.1;
		int time = 1;
		double fare = invoiceGenerator.calculateFare(distance, time,RideType.RIDE_NORMAL);
		assertEquals(5, fare, 0.0);
	}

	@Test
	public void givenMultipleWrites_ShouldReturnInvoiceSummary() {
		InvoiceGenerator invoiceGenerator = new InvoiceGenerator();
		Ride[] rides = { new Ride(2.0, 5,RideType.RIDE_NORMAL), new Ride(0.1, 1,RideType.RIDE_NORMAL) };
		InvoiceSummary fare = invoiceGenerator.calculateFare(rides);
		InvoiceSummary expected = new InvoiceSummary(2,30);
		assertEquals(expected, fare);
	}
	
	@Test
	public void givenUserId_ShouldReturnListOfRides() {
		RideRepository rideRepository = RideRepository.getInstance();
		Ride ride1 = new Ride(2,5,RideType.RIDE_NORMAL);
		Ride ride2 = new Ride(1,4,RideType.RIDE_NORMAL);
		Ride ride3 = new Ride(0.1,1,RideType.RIDE_NORMAL);
		
		rideRepository.addRide("abc",ride1);
		rideRepository.addRide("xyz",ride2);
		rideRepository.addRide("abc",ride3);
		
		Ride[] rides = rideRepository.getRides("abc");
		assertEquals(2,rides.length);
	}
	
	@Test
	public void givenUserID_ShouldReturnInvoiceSummaryForUser() {
		RideRepository rideRepository = RideRepository.getInstance();
		Ride ride1 = new Ride(2.0,5,RideType.RIDE_NORMAL);
		Ride ride2 = new Ride(1,4,RideType.RIDE_NORMAL);
		Ride ride3 = new Ride(0.1,1,RideType.RIDE_NORMAL);
		
		rideRepository.addRide("abc",ride1);
		rideRepository.addRide("xyz",ride2);
		rideRepository.addRide("abc",ride3);
		
		InvoiceGenerator invoiceGenerator = new InvoiceGenerator();
		
		InvoiceSummary fare = invoiceGenerator.calculateFare("abc");
		InvoiceSummary expected = new InvoiceSummary(2,30);
		assertEquals(expected, fare);
	}
	
	@Test
	public void givenPremiumDistanceAndTime_ShouldReturnTotalPremiumFare() {
		InvoiceGenerator invoiceGenerator = new InvoiceGenerator();
		double distance = 2.0;
		int time = 5;
		double fare = invoiceGenerator.calculateFare(distance, time,RideType.RIDE_PREMIUM);
		assertEquals(40, fare, 0.0);
	}
}
